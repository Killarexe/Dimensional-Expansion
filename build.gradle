plugins {
	id 'java'
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
	id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = '0.7a'
group = 'net.killarexe.dimensional_expansion' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'dimensional_expansion'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {

    mappings channel: "${map_channel}", version: "${map_version}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'dimensional_expansion'

            mods {
                dimensional_expansion {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'dimensional_expansion'

            mods {
                dimensional_expansion {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'dimensional_expansion'

            mods {
                dimensional_expansion {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'dimensional_expansion', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                dimensional_expansion {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
	// Create the library configuration, where our non-mod libraries will be added to
	library
	// Any dependency in the library configuration will also be added to the implementation configuration
	implementation.extendsFrom library
}

repositories {
    maven {
    	// location of the maven that hosts JEI files
    	name = "Progwml6 maven"
    	url = "https://dvs1.progwml6.com/files/maven/"
  	}
    maven {
    	// location of a maven mirror for JEI files, as a fallback
    	name = "ModMaven"
   		url = "https://modmaven.dev"
    }
    mavenCentral()
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    // compile against the JEI API but do not include it at runtime
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
    compileOnly("com.kohlschutter.junixsocket:junixsocket-core:${junixsocket_version}")
    // at runtime, use the full JEI
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")
    library("com.kohlschutter.junixsocket:junixsocket-core:${junixsocket_version}")
}

minecraft.runs.all {
	// Set the minecraft_classpath token to the paths of all jars in the library configuration
	// This is added with the actual Minecraft classpath to get the real classpath information later on
	lazyToken('minecraft_classpath') {
		configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
	}
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "dimensional_expansion",
                "Specification-Vendor"    : "dimensional_expansionsareus",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "dimensional_expansionsareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' 
}
