package net.killarexe.dimensional_expansion.client.gui.screen;

import com.mojang.authlib.minecraft.BanDetails;
import com.mojang.blaze3d.systems.RenderSystem;
import com.mojang.logging.LogUtils;
import com.mojang.realmsclient.RealmsMainScreen;
import com.mojang.realmsclient.gui.screens.RealmsNotificationsScreen;
import java.io.IOException;
import java.util.Objects;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Executor;
import javax.annotation.Nullable;

import net.killarexe.dimensional_expansion.DEMod;
import net.killarexe.dimensional_expansion.client.gui.component.DELogoRenderer;
import net.killarexe.dimensional_expansion.client.gui.screen.config.DEConfigScreen;
import net.minecraft.SharedConstants;
import net.minecraft.Util;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.Font;
import net.minecraft.client.gui.GuiGraphics;
import net.minecraft.client.gui.components.AbstractWidget;
import net.minecraft.client.gui.components.Button;
import net.minecraft.client.gui.components.ImageButton;
import net.minecraft.client.gui.components.LogoRenderer;
import net.minecraft.client.gui.components.MultiLineLabel;
import net.minecraft.client.gui.components.PlainTextButton;
import net.minecraft.client.gui.components.SplashRenderer;
import net.minecraft.client.gui.components.Tooltip;
import net.minecraft.client.gui.components.events.GuiEventListener;
import net.minecraft.client.gui.components.toasts.SystemToast;
import net.minecraft.client.gui.screens.AccessibilityOptionsScreen;
import net.minecraft.client.gui.screens.ConfirmScreen;
import net.minecraft.client.gui.screens.CreditsAndAttributionScreen;
import net.minecraft.client.gui.screens.LanguageSelectScreen;
import net.minecraft.client.gui.screens.OptionsScreen;
import net.minecraft.client.gui.screens.Screen;
import net.minecraft.client.gui.screens.multiplayer.JoinMultiplayerScreen;
import net.minecraft.client.gui.screens.multiplayer.SafetyScreen;
import net.minecraft.client.gui.screens.worldselection.SelectWorldScreen;
import net.minecraft.client.renderer.CubeMap;
import net.minecraft.client.renderer.PanoramaRenderer;
import net.minecraft.client.renderer.texture.TextureManager;
import net.minecraft.client.resources.language.I18n;
import net.minecraft.network.chat.CommonComponents;
import net.minecraft.network.chat.Component;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.server.MinecraftServer;
import net.minecraft.util.Mth;
import net.minecraft.world.level.levelgen.WorldOptions;
import net.minecraft.world.level.levelgen.presets.WorldPresets;
import net.minecraft.world.level.storage.LevelStorageSource;
import net.minecraft.world.level.storage.LevelSummary;
import net.minecraftforge.api.distmarker.Dist;
import net.minecraftforge.api.distmarker.OnlyIn;
import org.slf4j.Logger;

@OnlyIn(Dist.CLIENT)
public class DETitleScreen extends Screen {
	private static final Logger LOGGER = LogUtils.getLogger();
	   public static final Component COPYRIGHT_TEXT = Component.literal("Copyright Mojang AB. Do not distribute!");
	   public static final CubeMap CUBE_MAP = new CubeMap(new ResourceLocation(DEMod.MOD_ID, "textures/gui/title/background/panorama"));
	   private static final ResourceLocation ICONS = new ResourceLocation(DEMod.MOD_ID, "textures/gui/widgets.png");
	   private static final ResourceLocation PANORAMA_OVERLAY = new ResourceLocation("textures/gui/title/background/panorama_overlay.png");
	   @Nullable
	   private SplashRenderer splash;
	   private Button resetDemoButton;
	   /**
	    * A screen generated by realms for notifications drawn in addition to the main menu (buttons and such from both are
	    * drawn at the same time). May be null.
	    */
	   @Nullable
	   private RealmsNotificationsScreen realmsNotificationsScreen;
	   private final PanoramaRenderer panorama = new PanoramaRenderer(CUBE_MAP);
	   public boolean fading;
	   private long fadeInStart;
	   @Nullable
	   private DETitleScreen.WarningLabel warningLabel;
	   private final DELogoRenderer logoRenderer;
	   
	   private ImageButton paypalButton, youtubeButton, githubButton, configButton;

	   public DETitleScreen() {
	      this(false);
	   }

	   public DETitleScreen(boolean pFading) {
	      this(pFading, (LogoRenderer)null);
	   }

	   public DETitleScreen(boolean pFading, @Nullable LogoRenderer pLogoRenderer) {
	      super(Component.empty());
	      this.fading = pFading;
	      this.logoRenderer = (DELogoRenderer) Objects.requireNonNullElseGet(pLogoRenderer, () -> {
	         return new DELogoRenderer(false);
	      });
	   }

	   /**
	    * Is there currently a realms notification screen, and are realms notifications enabled?
	    */
	   private boolean realmsNotificationsEnabled() {
	      return this.realmsNotificationsScreen != null;
	   }

	   public void tick() {
	      if (this.realmsNotificationsEnabled()) {
	         this.realmsNotificationsScreen.tick();
	      }

	      this.minecraft.getRealms32BitWarningStatus().showRealms32BitWarningIfNeeded(this);
	   }

	   public static CompletableFuture<Void> preloadResources(TextureManager pTexMngr, Executor pBackgroundExecutor) {
	      return CompletableFuture.allOf(pTexMngr.preload(LogoRenderer.MINECRAFT_LOGO, pBackgroundExecutor), pTexMngr.preload(LogoRenderer.MINECRAFT_EDITION, pBackgroundExecutor), pTexMngr.preload(PANORAMA_OVERLAY, pBackgroundExecutor), CUBE_MAP.preload(pTexMngr, pBackgroundExecutor));
	   }

	   public boolean isPauseScreen() {
	      return false;
	   }

	   public boolean shouldCloseOnEsc() {
	      return false;
	   }

	   protected void init() {
	      if (this.splash == null) {
	         this.splash = this.minecraft.getSplashManager().getSplash();
	      }

	      int i = this.font.width(COPYRIGHT_TEXT);
	      int j = this.width - i - 2;
	      int l = this.height / 4 + 48;
	      if (this.minecraft.isDemo()) {
	         this.createDemoMenuOptions(l, 24);
	      } else {
	         this.createNormalMenuOptions(l, 24);
	         this.addRenderableWidget(Button.builder(Component.translatable("fml.menu.mods"), button -> this.minecraft.setScreen(new net.minecraftforge.client.gui.ModListScreen(this)))
	            .pos(this.width / 2 - 100, l + 24 * 2).size(98, 20).build());
	      }

	      this.addRenderableWidget(new ImageButton(this.width / 2 - 124, l + 72 + 12, 20, 20, 0, 106, 20, Button.WIDGETS_LOCATION, 256, 256, (p_280830_) -> {
	         this.minecraft.setScreen(new LanguageSelectScreen(this, this.minecraft.options, this.minecraft.getLanguageManager()));
	      }, Component.translatable("narrator.button.language")));
	      this.addRenderableWidget(Button.builder(Component.translatable("menu.options"), (p_280838_) -> {
	         this.minecraft.setScreen(new OptionsScreen(this, this.minecraft.options));
	      }).bounds(this.width / 2 - 100, l + 72 + 12, 98, 20).build());
	      this.addRenderableWidget(Button.builder(Component.translatable("menu.quit"), (p_280831_) -> {
	         this.minecraft.stop();
	      }).bounds(this.width / 2 + 2, l + 72 + 12, 98, 20).build());
	      this.addRenderableWidget(new ImageButton(this.width / 2 + 104, l + 72 + 12, 20, 20, 0, 0, 20, Button.ACCESSIBILITY_TEXTURE, 32, 64, (p_280835_) -> {
	         this.minecraft.setScreen(new AccessibilityOptionsScreen(this, this.minecraft.options));
	      }, Component.translatable("narrator.button.accessibility")));
	      this.addRenderableWidget(new PlainTextButton(j, this.height - 10, i, 10, COPYRIGHT_TEXT, (p_280834_) -> {
	         this.minecraft.setScreen(new CreditsAndAttributionScreen(this));
	      }, this.font));
	      this.minecraft.setConnectedToRealms(false);
	      if (this.realmsNotificationsScreen == null) {
	         this.realmsNotificationsScreen = new RealmsNotificationsScreen();
	      }

	      if (this.realmsNotificationsEnabled()) {
	         this.realmsNotificationsScreen.init(this.minecraft, this.width, this.height);
	      }

	      if (!this.minecraft.is64Bit()) {
	         this.warningLabel = new DETitleScreen.WarningLabel(this.font, MultiLineLabel.create(this.font, Component.translatable("title.32bit.deprecation"), 350, 2), this.width / 2, l - 24);
	      }

	   }

	   /**
	    * Adds Singleplayer and Multiplayer buttons on Main Menu for players who have bought the game.
	    */
	   private void createNormalMenuOptions(int pY, int pRowHeight) {
	      this.addRenderableWidget(Button.builder(Component.translatable("menu.singleplayer"), (p_280832_) -> {
	         this.minecraft.setScreen(new SelectWorldScreen(this));
	      }).bounds(this.width / 2 - 100, pY, 200, 20).build());
	      Component component = this.getMultiplayerDisabledReason();
	      boolean flag = component == null;
	      Tooltip tooltip = component != null ? Tooltip.create(component) : null;
	      (this.addRenderableWidget(Button.builder(Component.translatable("menu.multiplayer"), (p_280833_) -> {
	         Screen screen = (Screen)(this.minecraft.options.skipMultiplayerWarning ? new JoinMultiplayerScreen(this) : new SafetyScreen(this));
	         this.minecraft.setScreen(screen);
	      }).bounds(this.width / 2 - 100, pY + pRowHeight * 1, 200, 20).tooltip(tooltip).build())).active = flag;
	      (this.addRenderableWidget(Button.builder(Component.translatable("menu.online"), (p_210872_) -> {
	         this.realmsButtonClicked();
	      }).bounds(this.width / 2 + 2, pY + pRowHeight * 2, 98, 20).tooltip(tooltip).build())).active = flag;
	       configButton =  new ImageButton(width / 2 -200, height / 4 + 48 + 40, 16, 16, 0, 96, ICONS, (button -> {
	           minecraft.setScreen(new DEConfigScreen(this));
	       }));
		   paypalButton = new ImageButton(width / 2 -200, height / 4 + 48 + 60, 16, 16, 0, 0, ICONS, (button -> {
	           Util.getPlatform().openUri("https://paypal.me/exekillar");
	       }));
	       youtubeButton = new ImageButton(width / 2 -200, height / 4 + 48 + 20, 16, 16, 0, 64, ICONS, (button -> {
	           Util.getPlatform().openUri("https://youtube.com/channel/UC7lHA5pMQMrTTeZg1yk2hXw");
	       }));
	       githubButton = new ImageButton(width / 2 -200, height / 4 + 48, 16, 16, 0, 32, ICONS, (button -> {
	           Util.getPlatform().openUri("https://github.com/Killarexe/Dimensional-Expansion");
	       }));
	       
	       addRenderableWidget(configButton);
	       addRenderableWidget(paypalButton);
	       addRenderableWidget(youtubeButton);
	       addRenderableWidget(githubButton);
	   }

	   @Nullable
	   private Component getMultiplayerDisabledReason() {
	      if (this.minecraft.allowsMultiplayer()) {
	         return null;
	      } else {
	         BanDetails bandetails = this.minecraft.multiplayerBan();
	         if (bandetails != null) {
	            return bandetails.expires() != null ? Component.translatable("title.multiplayer.disabled.banned.temporary") : Component.translatable("title.multiplayer.disabled.banned.permanent");
	         } else {
	            return Component.translatable("title.multiplayer.disabled");
	         }
	      }
	   }

	   /**
	    * Adds Demo buttons on Main Menu for players who are playing Demo.
	    */
	   private void createDemoMenuOptions(int pY, int pRowHeight) {
	      boolean flag = this.checkDemoWorldPresence();
	      this.addRenderableWidget(Button.builder(Component.translatable("menu.playdemo"), (p_280837_) -> {
	         if (flag) {
	            this.minecraft.createWorldOpenFlows().loadLevel(this, "Demo_World");
	         } else {
	            this.minecraft.createWorldOpenFlows().createFreshLevel("Demo_World", MinecraftServer.DEMO_SETTINGS, WorldOptions.DEMO_OPTIONS, WorldPresets::createNormalWorldDimensions);
	         }

	      }).bounds(this.width / 2 - 100, pY, 200, 20).build());
	      this.resetDemoButton = this.addRenderableWidget(Button.builder(Component.translatable("menu.resetdemo"), (p_232770_) -> {
	         LevelStorageSource levelstoragesource = this.minecraft.getLevelSource();

	         try (LevelStorageSource.LevelStorageAccess levelstoragesource$levelstorageaccess = levelstoragesource.createAccess("Demo_World")) {
	            LevelSummary levelsummary = levelstoragesource$levelstorageaccess.getSummary();
	            if (levelsummary != null) {
	               this.minecraft.setScreen(new ConfirmScreen(this::confirmDemo, Component.translatable("selectWorld.deleteQuestion"), Component.translatable("selectWorld.deleteWarning", levelsummary.getLevelName()), Component.translatable("selectWorld.deleteButton"), CommonComponents.GUI_CANCEL));
	            }
	         } catch (IOException ioexception) {
	            SystemToast.onWorldAccessFailure(this.minecraft, "Demo_World");
	            LOGGER.warn("Failed to access demo world", (Throwable)ioexception);
	         }

	      }).bounds(this.width / 2 - 100, pY + pRowHeight * 1, 200, 20).build());
	      this.resetDemoButton.active = flag;
	   }

	   private boolean checkDemoWorldPresence() {
	      try {
	         boolean flag;
	         try (LevelStorageSource.LevelStorageAccess levelstoragesource$levelstorageaccess = this.minecraft.getLevelSource().createAccess("Demo_World")) {
	            flag = levelstoragesource$levelstorageaccess.getSummary() != null;
	         }

	         return flag;
	      } catch (IOException ioexception) {
	         SystemToast.onWorldAccessFailure(this.minecraft, "Demo_World");
	         LOGGER.warn("Failed to read demo world data", (Throwable)ioexception);
	         return false;
	      }
	   }

	   private void realmsButtonClicked() {
	      this.minecraft.setScreen(new RealmsMainScreen(this));
	   }

	   public void render(GuiGraphics pGuiGraphics, int pMouseX, int pMouseY, float pPartialTick) {
	      if (this.fadeInStart == 0L && this.fading) {
	         this.fadeInStart = Util.getMillis();
	      }

	      float f = this.fading ? (float)(Util.getMillis() - this.fadeInStart) / 1000.0F : 1.0F;
	      this.panorama.render(pPartialTick, Mth.clamp(f, 0.0F, 1.0F));
	      RenderSystem.enableBlend();
	      pGuiGraphics.setColor(1.0F, 1.0F, 1.0F, this.fading ? (float)Mth.ceil(Mth.clamp(f, 0.0F, 1.0F)) : 1.0F);
	      pGuiGraphics.blit(PANORAMA_OVERLAY, 0, 0, this.width, this.height, 0.0F, 0.0F, 16, 128, 16, 128);
	      pGuiGraphics.setColor(1.0F, 1.0F, 1.0F, 1.0F);
	      float f1 = this.fading ? Mth.clamp(f - 1.0F, 0.0F, 1.0F) : 1.0F;
	      this.logoRenderer.renderLogo(pGuiGraphics, this.width, f1);
	      int i = Mth.ceil(f1 * 255.0F) << 24;
	      if ((i & -67108864) != 0) {
	         if (this.warningLabel != null) {
	            this.warningLabel.render(pGuiGraphics, i);
	         }

	         if (this.splash != null) {
	            this.splash.render(pGuiGraphics, this.width, this.font, i);
	         }

	         String s = "Minecraft " + SharedConstants.getCurrentVersion().getName();
	         if (this.minecraft.isDemo()) {
	            s = s + " Demo";
	         } else {
	            s = s + ("release".equalsIgnoreCase(this.minecraft.getVersionType()) ? "" : "/" + this.minecraft.getVersionType());
	         }

	         if (Minecraft.checkModStatus().shouldReportAsModified()) {
	            s = s + I18n.get("menu.modded");
	         }

	         net.minecraftforge.internal.BrandingControl.forEachLine(true, true, (brdline, brd) ->
	            pGuiGraphics.drawString(this.font, brd, 2, this.height - ( 10 + brdline * (this.font.lineHeight + 1)), 16777215 | i)
	         );

	         net.minecraftforge.internal.BrandingControl.forEachAboveCopyrightLine((brdline, brd) ->
	            pGuiGraphics.drawString(this.font, brd, this.width - font.width(brd), this.height - (10 + (brdline + 1) * ( this.font.lineHeight + 1)), 16777215 | i)
	         );


	         for(GuiEventListener guieventlistener : this.children()) {
	            if (guieventlistener instanceof AbstractWidget) {
	               ((AbstractWidget)guieventlistener).setAlpha(f1);
	            }
	         }
	         
	         if(githubButton.isHoveredOrFocused()){
	             pGuiGraphics.renderTooltip(font, Component.translatable("button." + DEMod.MOD_ID + ".github"), pMouseX, pMouseY);
	         }
	         if(paypalButton.isHoveredOrFocused()){
	        	 pGuiGraphics.renderTooltip(font, Component.translatable("button." + DEMod.MOD_ID + ".paypal"), pMouseX, pMouseY);
	         }
	         if(youtubeButton.isHoveredOrFocused()){
	        	 pGuiGraphics.renderTooltip(font, Component.translatable("button." + DEMod.MOD_ID + ".youtube"), pMouseX, pMouseY);
	         }
	         if(configButton.isHoveredOrFocused()){
	        	 pGuiGraphics.renderTooltip(font, Component.translatable("button." + DEMod.MOD_ID + ".config"), pMouseX, pMouseY);
	         }

	         super.render(pGuiGraphics, pMouseX, pMouseY, pPartialTick);
	         if (this.realmsNotificationsEnabled() && f1 >= 1.0F) {
	            RenderSystem.enableDepthTest();
	            this.realmsNotificationsScreen.render(pGuiGraphics, pMouseX, pMouseY, pPartialTick);
	         }

	      }
	   }

	   public boolean mouseClicked(double pMouseX, double pMouseY, int pButton) {
	      if (super.mouseClicked(pMouseX, pMouseY, pButton)) {
	         return true;
	      } else {
	         return this.realmsNotificationsEnabled() && this.realmsNotificationsScreen.mouseClicked(pMouseX, pMouseY, pButton);
	      }
	   }

	   public void removed() {
	      if (this.realmsNotificationsScreen != null) {
	         this.realmsNotificationsScreen.removed();
	      }

	   }

	   public void added() {
	      super.added();
	      if (this.realmsNotificationsScreen != null) {
	         this.realmsNotificationsScreen.added();
	      }

	   }

	   private void confirmDemo(boolean p_96778_) {
	      if (p_96778_) {
	         try (LevelStorageSource.LevelStorageAccess levelstoragesource$levelstorageaccess = this.minecraft.getLevelSource().createAccess("Demo_World")) {
	            levelstoragesource$levelstorageaccess.deleteLevel();
	         } catch (IOException ioexception) {
	            SystemToast.onWorldDeleteFailure(this.minecraft, "Demo_World");
	            LOGGER.warn("Failed to delete demo world", (Throwable)ioexception);
	         }
	      }

	      this.minecraft.setScreen(this);
	   }

	   @OnlyIn(Dist.CLIENT)
	   static record WarningLabel(Font font, MultiLineLabel label, int x, int y) {
	      public void render(GuiGraphics pGuiGraphics, int pColor) {
	         this.label.renderBackgroundCentered(pGuiGraphics, this.x, this.y, 9, 2, 2097152 | Math.min(pColor, 1426063360));
	         this.label.renderCentered(pGuiGraphics, this.x, this.y, 9, 16777215 | pColor);
	      }
	   }
}